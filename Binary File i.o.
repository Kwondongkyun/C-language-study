### 2진 파일 입출력

(1) fread, fwrite 함수
    fwrite 함수 : 파일로 2진 데이터 저장.
    -> 파일로 데이터를 저장한 다음, 저장한 항목의 개수 return
    
    fwrite 함수의 원형
    size_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream);
    -> buffer : 파일로 저장할 데이터의 주소 (==배열의 시작 주소, 기본형 변수 or 구조체 변수의 주소)
    -> size : 저장할 데어터 항목 하나의 크기
    -> count : 저장할 항목의 개수
    -> stream : 파일 포인터
    
    fread 함수 : 파일에서 2진 데이터를 읽어옴
    -> 파일에서 데이터를 읽어온 다음, 읽은 항목의 개수 return
    
    fread 함수의 원형
    size_t fread(void* buffer, size_t size, size_t count, FILE* stream);
    -> buffer : 파일에서 읽은 데이터를 저장할 주소
    -> size : 읽어올 데이터 항목 하나의 크기
    -> count : 읽어올 항목의 개수
    -> stream : 파일 포인터
    
    
    < 2진 파일에 int 배열을 저장하고 읽어오기 >
    Ex) int 배열을 2진 파일로 저장하고 2진 파일을 열어 int 배열로 읽어온 후 두 배열의 값이 같은지 비교하는 코드
    #define _CRT_SECURE_NO_WARNINGS
    #include <stdio.h>
    #define SIZE 10

    int is_equal_array(const int x[], const int y[], int sz) {  // 두 배열이 같은지 비교하는 함수
      int i;
      for (i = 0; i < sz; i++)
        if (x[i] != y[i])
          return 0;
      return 1;
    }

    int main(void)
    {
      int arr1[SIZE] = { 60, 34, 55, 28, 12, 5, 63, 45, 91 };
      int arr2[SIZE];
      FILE* fp = NULL;

      fp = fopen("test.dat", "wb");                 // 출력용 2진 파일을 연다.("b")
      if (fp == NULL) {
        printf("출력용 파일 열기 실패\n");
        return 1;
      }
      fwrite(arr1, sizeof(arr1[0]), SIZE, fp);      // arr1을 파일로 저장한다.
      fclose(fp);                                   // ★
      fp = NULL;                                    // 파일 포인터도 더 이상 사용되지 않으면 널 포인터로 만든다.(안전)

      fp = fopen("test.dat", "rb");                 // 입력용 2진 파일을 연다.
      if (fp == NULL) {                             // fp를 다시 사용할 수 있다.(L.52 : fp = NULL;)
        printf("입력용 파일 열기 실패\n");
        return 1;
      }
      fread(arr2, sizeof(arr2[0]), SIZE, fp);       // 파일(arr1)에서 2진 데이터를 읽어와 저장(arr2)해준다.
      fclose(fp);
      fp = NULL;

      if (is_equal_array(arr1, arr2, SIZE))         // arr1과 arr2가 같은지 비교한다.
        printf("2진 파일 입출력 성공\n");
      else
        printf("2진 파일 입출력 실패\n");
    }
    
    ★ 출력용 2진 파일에 저장한 다음 반드시 파일을 닫아야 한다.


(2) 파일의 임의 접근
    파일 위치 지시자 : 입력과 출력이 수행되는 위치를 가리킴
    -> 입력용 or 출력용 파일을 열 때 -> 파일 위치 지시자 : 파일의 시작 위치를 가리킴.
    -> 파일을 추가 모드("a" or "a+")로 열 때 -> 파일 위치 지시자 : 파일의 끝 위치를 가리킴
    -> 파일을 연 후 입출력 함수 호출 -> 파일 위치 지시자 갱신
    
    < 2진 파일에 대해 임의 접근 -> fseek 함수, ftell 함수 이용 >
    fseek 함수
    -> 파일에서 입출력을 수행할 위치를 조정
    
    fseek 함수의 원형
    int fseek(FILE *stream, long offset, int origin);
    -> offset : 기준 위치로부터 몇 바이트 떨어진 위치인지 지정
    -> 기준 위치를 지정 (기준 위치 : 파일의 시작(SEEK_SET), 현재 위치(SEEK_CUR), 파일의 끝(SEEK_END))
    
    ftell 함수
    -> 파일 시작부터 파일 위치 지시자가 몇 바이트 떨어져 있는지 return
    
    ftell 함수의 원형
    long ftell(FILE *stream);
    
    
    
    
    
    
    
