### 구조체
**코드**

-열거체, 공용체, typedef


// 열거체
#include <stdio.h>
enum direction {                                           // 열거체의 정의
	north, south, east, west                                 // 열거체 상수 정의 X -> 순서대로 0부터 ++
};
int main(void) {
	printf("%d %d %d %d", north, south, east, west);         // 값 : 0 1 2 3

	return 0;
}


// 열거체 배열
#include <stdio.h>

enum direction {north, south, east, west};

int main(void) {
	enum direction moves[] = {
		east, north, west, south, north, west, south, east
	};
	int size = sizeof(moves) / sizeof(moves[0]);
	int i;

	printf("이동 순서: ");
	for (i = 0; i < size; i++) {
		switch (moves[i]) {                 // case 숫자: 꼴로 표현 가능(열거체)
		case north:													// case 0:
			printf("북 ");
			break;
		case south:													// case 1:
			printf("남 ");
			break;
		case east:													// case 2:
			printf("동 ");
			break;
		case west:													// case 3:
			printf("서 ");
			break;
		}
	}
	printf("\n");
}


// 공용체
#include <stdio.h>
union test {                                      // 공용체 정의
	int i;                                          // 공용체 멤버들은 모두 같은 주소에 할당된다.
	char c;
	short s;
};

int main(void)
{
	union test t1 = { 0x12345678 };

	printf("t1.i의 주소 = %p\n", &t1.i);
	printf("t1.c의 주소 = %p\n", &t1.c);
	printf("t1.s의 주소 = %p\n", &t1.s);

	printf("sizeof(union test) = %d\n", sizeof(union test));

	printf("t1.i = %x\n", t1.i);
	printf("t1.c = %x\n", t1.c);
	printf("t1.s = %x\n", t1.s);
}


// typedef 정의 및 사용
#include <stdio.h>

typedef struct point {
	int x, y;
}point_t;
void print_point(const point_t* ptr);

int main(void) {
	point_t pt1 = { 10, 20 };
	print_point(&pt1);
}
void print_point(const point_t* ptr) {
	printf("(%d, %d) ", ptr->x, (*ptr).y);
}


// typedef 사용해보기

// 구조체 초기화 & 대입 (typedef)
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

typedef struct content {                             // typedef 선언
	char title[40];
	int price;
	double rate;
} content_t;                                         // typedef stuct content content_t;

int main(void) {
	content_t c1 = { "Avengers", 11000, 8.8 };         // struct content c1
	content_t c2 = { "cake", 123, 7.7 };               // struct content c2
	struct content c3;                                 // content_t c3

	c3 = c1;
	c3.rate = c2.rate;
	strcpy(c3.title, c2.title);

	printf("c1 = %s, %d, %.1f\n", c1.title, c1.price, c1.rate);
	printf("c2 = %s, %d, %.1f\n", c2.title, c2.price, c2.rate);
	printf("c3 = %s, %d, %.1f\n", c3.title, c3.price, c3.rate);
	
	return 0;
}


// 구조체 배열 (typedef)
#include <stdio.h>
#include <string.h>

typedef struct content {                      // typedef 선언
	char title[40];
	int price;
	double rate;
}content_t;                                   // typedef struct content content_t;

int main(void) {
	content_t arr[] = {                         // struct content arr[]
		{"Apple", 100, 1.1},
		{"Banana", 200, 2.2},
		{"Orange", 300, 3.3}
	};
	int size = sizeof(arr) / sizeof(arr[0]);
	int i;

	for (i = 0; i < size; i++)
		printf("arr[%d] = %s, %d, %.1lf\n", i, arr[i].title, arr[i].price, arr[i].rate);

	return 0;
}

// 구조체 포인터 (typedef)
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

typedef struct content {                                        // typedef 선언
	char title[40];
	int price;
	double rate;
}content_t;                                                     // typedef struct content content_t;

int main(void)
{
	struct content c1 = { "Avengers", 11000, 8.8 };
	content_t* p = &c1;				                                    // struct content* p = &c1;

	p->price *= 0.8;
	(*p).rate = 8.9;
	strcat(p->title, ": Endgame");

	printf("%s, %d, %.1f\n", p->title, p->price, p->rate);
}


// 구조체 함수(간단한 함수 예시) (typedef)
#include <stdio.h>

typedef struct point {                                            // typedef 선언
	int x, y;
}point_t;                                                         // typedef struct point point_t;
void print_point(point_t pt) {
	printf("(%d, %d)", pt.x, pt.y);
}
int main(void) {
	int a, b;
	scanf_s("%d %d", &a, &b);

	point_t pt1 = { a,b };                                          // construct point pt1
	print_point(pt1);
}


// 구조체 함수(값에 의한 호출) (typedef)
#include <stdio.h>
typedef struct point {
	int x, y;
}point_t;                                                        // typedef struct point point_t;
void print_point(point_t pt);                                    // void print_point(struct point pt);
int main(void) {
	point_t arr[] = {
		{10,20}, {35,41}, {12,63}, {72,55}, {92, 86}, {4,27}
	};
	int size = sizeof(arr) / sizeof(arr[0]);
	int i;

	for (i = 0; i < size; i++) {
		print_point(arr[i]);
	}
	printf("\n");
}
void print_point(point_t pt) {
	printf("(%d, %d) ", pt.x, pt.y);
}


// 구조체 함수(참조에 의한 호출)
#include <stdio.h>

typedef struct point {
	int x, y;
}point_t;                                                         // typedef struct point point_t;

void print_point(const point_t* ptr);                             //  void print_point(const struct point* ptr);
void move_point(point_t* ptr, int offset);                        //  void move_point(struct point* ptr, int offset);
int main(void) {
	point_t arr[] = {                                               // struct point arr[]
		{13, 31}, {43, 58}, {23, 19}, {68, 74}, {48, 79}, {5, 19}
	};
	int size = sizeof(arr) / sizeof(arr[0]);
	int i, offset;

	for (i = 0; i < size; i++) {
		print_point(&arr[i]);
	}printf("\n");

	printf("이동할 오프셋? ");
	scanf_s("%d", &offset);

	for (i = 0; i < size; i++) {
		move_point(&arr[i], offset);
		print_point(&arr[i]);
	}
}
void print_point(const point_t* ptr) {
	printf("(%d, %d) ", ptr->x, ptr->y);
}
void move_point(point_t* ptr, int offset) {
	ptr->x = ptr->x + offset;
	ptr->y = ptr->y + offset;
}


// 구조체 멤버로 다른 구조체 사용
#include <stdio.h>
#include <math.h>

typedef struct point {
	int x, y;
}point_t;                                           // typedef struct point point_t;

typedef struct line {
	struct point start, end;
}line_t;                                            // typedef struct line line_t;

void print_point(const point_t* ptr);               // void print_point(const struct point* ptr);
double get_length(const line_t* ptr);               // double get_length(const struct line* ptr);

int main(void) {
	line_t ln1 = {                                    // struct line ln1
		{10, 20}, {30, 40}
	};
	printf("직선 정보: ");
	print_point(&ln1.start);
	print_point(&ln1.end);
	printf("\n길이: %f\n", get_length(&ln1));
}

void print_point(const point_t* ptr) {
	printf("(%d, %d) ", ptr->x, ptr->y);
}

double get_length(const line_t* ptr) {
	int dx = ptr->end.x - ptr->start.x;
	int dy = ptr->end.y - ptr->start.y;
	return sqrt(dx * dx + dy * dy);
}


// 열거체 배열 (typedef)
#include <stdio.h>
typedef enum direction {
	north, south, east, west
}direction_e;                                                    // type enum direction direction_e;

int main(void) {
	direction_e moves[] = {                                        // enum direction moves[]
		east, north, west, south, north, west, south, east
	};
	int size = sizeof(moves) / sizeof(moves[0]);
	int i;

	printf("이동 순서: ");
	for (i = 0; i < size; i++) {
		switch (moves[i]) {
		case north:
			printf("북 ");
			break;
		case south:
			printf("남 ");
			break;
		case east:
			printf("동 ");
			break;
		case west:
			printf("서 ");
			break;
		}
	}
	printf("\n");
}


// 공용체 (typedef)
#include <stdio.h>
typedef union test
{
	int i;
	char c;
	short s;
}test_u;                                          // typedef union test test_u;

int main(void)
{
	test_u t1 = { 0x12345678 };                     // union test t1

	printf("t1.i의 주소 = %p\n", &t1.i);
	printf("t1.c의 주소 = %p\n", &t1.c);
	printf("t1.s의 주소 = %p\n", &t1.s);

	printf("sizeof(union test) = %d\n", sizeof(union test));

	printf("t1.i = %x\n", t1.i);
	printf("t1.c = %x\n", t1.c);
	printf("t1.s = %x\n", t1.s);
}


