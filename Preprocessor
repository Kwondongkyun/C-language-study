< 전처리기 >
전처리기 : C/C++ 컴파일러에 내장된 프로그램으로 소스 파일을 컴파일하기 전에 미리 준비하는 기능 제공
-> 다른 파일 포함 : Include
-> 소스 파일 내의 특정 문자열을 다른 문자열로 대치 : replace
-> 조건에 따라 코드 일부 컴파일O or 컴파일X 선택 : Choose
-> 전처리기 문장 : '#'으로 시작


전처리기 문장
#define       : 매크로를 정의
#undef        : 매크로 정의를 해제
#include      : 헤더 파일을 포함
#if           : 조건식이 참이면 #if와 #endif 사이의 코드 블록 컴파일
#ifdef        : 매크로가 정의된 경우에 #ifdef와 #endif 사이의 코드 블록 컴파일
#ifndef       : 매크로가 정의되지 않은 경우에 #ifndef와 #endif 사이의 코드 블록 컴파일
#else         : #if, #ifdef, #ifndef와 결합되어 사용. #if, #ifdef, #ifndef는 반드시 #endif와 한 쌍을 이루어야 함
#elif
#endif
#             : 문자열을 만든다. -> # 다음에 오는 이름을 ""로 감싸 문자열 리터럴로 만든다, # 다음 : 함수 매크로의 매개변수
##            : 토큰을 결합한다. -> ## 연산자의 좌변이나 우변 : 함수 매크로의 매개변수 O -> 매크로의 매개변수를 문자열 대치 후 토큰 결합
#error        : 에러 메시지를 출력하고, 컴파일을 멈춘다.


< 매크로 >
1. 단순 매크로(
   단순 매크로 : 특정값으로 정의되는 매크로(매크로 상수 == 단순 매크로)
   
   단순 매크로 정의
   #define 매크로명 값
   #define 매크로명
   -> 정수형, 실수형, 문자열 상수 : 단순 매크로로 정의 O
   -> 함수명, 데이터형 : 단순 메크로로 정의 O
   -> 값을 지정하지 않고 정의 O Ex) #define _CRT_SECURE_NO_WARNINGS
   
   
2. 함수 매크로(function-like-macro_
   함수 매크로 : 함수처럼 매개변수가 있는 매크로
   -> 실제 함수 X
   -> 전처리기는 함수 매크로가 사용되는 곳에 '문자열 대치'를 통해서 코드를 복사해서 넣어준다.      * 함수 매크로가 사용되는 곳에 코드를 복사해서 넣어주는 것 : 매크로 확장
   
   함수 매크로의 정의
   #define 함수매크로명(매개변수목록) 대치할내용
   Ex) #define SQUARE(x) ((x)*(x))
   -> 함수 매크로의 매개변수 : 함수의 매개변수 X -> 데이터형 없이 이름만 적는다.
   -> 함수 매크로의 매개변수 : 데이터형 X -> 어떤 형의 값이든지 인자로 전달 O (문자열 대치가 일어난다.)
   -> 함수 매크로 사용한 코드 : 함수 호출문 X -> 인자와 매개변수의 데이터형 검사 X
   -> 일반적인 함수 호출 과정 수행 X
   -> 함수 매크로를 정의할 때 매개변수를 ()로 감싸준다. : 인자의 값부터 계산
   -> 증감 연산식이 매개변수마다 이뤄진다.
   
   Ex) 함수 매크로의 정의 & 사용
       #include <stdio.h>
       #define SQUARE(x) ((x)*(x))                                // 함수 매크로 사용
 
       int square(int x) { return x * x; }                        // 일반 함수 square 함수
 
       int main(void)
       {
         int a;
         printf("SQUARE(10) = %d\n", SQUARE(10));                 // 100
         printf("SQUARE(1.5) = %d\n", SQUARE(1/5));               // 2.250000
         printf("SQUARE('a') = %d\n", SQUARE('a'));               // 9409
 
 
         printf("square(1+2) = %d\n", square(1+2));               // 9
         printf("SQUARE(1+2) = %d\n", SQUARE(1+2));               // 9
 
         a = 5;
         printf("square(++a) = %d\n", square(++a));               // 36
         a = 5;
         printf("SQUARE(++a) = %d\n", SQUARE(++a));               // 49 (함수 매크로 : 매개변수마다 인자 연산 처리)
 
         printf("square(3.1) = %d\n", square(3.1));               // 9
         printf("SQUARE(3.1) = %f\n", SQUARE(3.1));               // 9.610000
       }
